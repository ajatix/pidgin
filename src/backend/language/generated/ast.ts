/******************************************************************************
 * This file was generated by langium-cli 1.2.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, Reference, ReferenceInfo, TypeMetaData } from 'langium';

export interface Edge extends AstNode {
    readonly $container: Model;
    readonly $type: 'Edge';
    port: Reference<Port>
    source: Reference<Node>
    target: Reference<Node>
}

export const Edge = 'Edge';

export function isEdge(item: unknown): item is Edge {
    return reflection.isInstance(item, Edge);
}

export interface Model extends AstNode {
    readonly $type: 'Model';
    edges: Array<Edge>
    nodes: Array<Node>
    ports: Array<Port>
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface Node extends AstNode {
    readonly $container: Model;
    readonly $type: 'Node';
    label?: string
    name: string
    nodes: Array<Reference<Node>>
    ports: Array<Reference<Port>>
}

export const Node = 'Node';

export function isNode(item: unknown): item is Node {
    return reflection.isInstance(item, Node);
}

export interface Port extends AstNode {
    readonly $container: Model;
    readonly $type: 'Port';
    label?: string
    name: string
}

export const Port = 'Port';

export function isPort(item: unknown): item is Port {
    return reflection.isInstance(item, Port);
}

export type FettuccineAstType = {
    Edge: Edge
    Model: Model
    Node: Node
    Port: Port
}

export class FettuccineAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['Edge', 'Model', 'Node', 'Port'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Edge:port':
            case 'Node:ports': {
                return Port;
            }
            case 'Edge:source':
            case 'Edge:target':
            case 'Node:nodes': {
                return Node;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'edges', type: 'array' },
                        { name: 'nodes', type: 'array' },
                        { name: 'ports', type: 'array' }
                    ]
                };
            }
            case 'Node': {
                return {
                    name: 'Node',
                    mandatory: [
                        { name: 'nodes', type: 'array' },
                        { name: 'ports', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new FettuccineAstReflection();
